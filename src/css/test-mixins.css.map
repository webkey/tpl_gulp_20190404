{"version":3,"sources":["test-mixins.sass","utils/_mixins.sass","utils/_variables.sass","utils/_placeholders.sass"],"names":[],"mappings":"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","file":"test-mixins.css","sourcesContent":["@import \"utils/variables\";\n@import \"utils/mixins\";\n@import \"utils/functions\";\n\n@import \"../libs/mathsass/dist/math\";\n@import \"../libs/mathsass/dist/functions/tan\";\n\n.mx-test .content {\n  margin: 0 0 0 300px;\n  @include padding-vertical(nth($text-layout-space, 1)); }\n\n.mx-test .sidebar {\n  width: 260px; }\n\n.mx-test .layout-text {\n  @include padding-horizontal(nth($text-layout-space, 2)); }\n\n.mx-test .section {\n  margin-bottom: $bottom-space--large; }\n\n.mx-test .section__box {\n  margin-bottom: $bottom-space--medium; }\n\n.mx-subtitle {\n  @include font-bold;\n  margin-bottom: $bottom-space--small;\n  background-color: white;\n\n  .mx-element & {\n    padding: $bottom-space--small; } }\n\n.mx-element {\n  background-color: darkolivegreen; }\n\n.mx-inner {\n  background-color: darkslategray; }\n\n.mx-test .mx-object-fit-cover {\n  @include ratio(16, 9, true);\n  position: relative;\n  width: 320px;\n\n  img {\n    @include object-fit-position($pos: absolute); } }\n\n.mx-test .mx-object-fit-contain {\n  @include ratio(16, 9, true);\n  position: relative;\n  width: 320px;\n\n  img {\n    @include object-fit-position(contain, absolute); } }\n\n.mx-margin {\n  width: 320px;\n  overflow: hidden; }\n\n.mx-margin__inner {\n  @include size(auto, 100px);\n  @include margin(10px, 20px, 30px, 40px);\n\n  &::before {\n    @include pseudo($content: 'margin(10px, 20px, 30px, 40px)', $pos: relative);\n    padding: 5px;\n    text-align: center; } }\n\n.mx-push-auto {\n  padding: 10px; }\n\n.mx-push-auto__inner {\n  @include size(320px, 50px);\n  @include push-auto; }\n\n// triangle\n.mx-triangle {\n  @include size(320px, 200px);\n  padding: 10px;\n  text-align: center;\n  cursor: default; }\n\n.mx-triangle__inner {\n  display: inline-block;\n  position: relative;\n  vertical-align: middle;\n  max-width: 90%;\n  @include size(200px, 50px);\n  filter: drop-shadow(4px 4px 2px rgba(0, 0, 0, 0.4));\n\n  &::before {\n    @include pseudo(); }\n\n  &.mx--to-north::before {\n    @include triangle(top, $size: 10px); }\n\n  &.mx--to-east::before {\n    @include triangle(right, $size: 10px); }\n\n  &.mx--to-south::before {\n    @include triangle(bottom, $size: 10px); }\n\n  &.mx--to-west::before {\n    @include triangle(left, $size: 10px); } }\n\n.mx-triangle-pretty {\n  @include size(320px, 200px);\n  padding: 10px;\n  text-align: center;\n  cursor: default; }\n\n.mx-triangle-pretty__inner {\n  display: inline-block;\n  position: relative;\n  vertical-align: middle;\n  max-width: 90%;\n  @include size(200px, 50px);\n  filter: drop-shadow(4px 4px 2px rgba(0, 0, 0, 0.4));\n\n  &.mx--to-north {\n    @include triangle-pretty(top, (left: 50%, bottom: 100%), darkolivegreen, 30px, 30px, darkslategray, 3px); }\n\n  &.mx--to-east {\n    @include triangle-pretty(right, (top: 50%, left: 100%), darkolivegreen, 30px, 30px, darkslategray, 3px); }\n\n  &.mx--to-south {\n    @include triangle-pretty(bottom, (right: 50%, top: 100%), darkolivegreen, 30px, 30px, darkslategray, 3px); }\n\n  &.mx--to-west {\n    @include triangle-pretty(left, (top: 50%, right: 100%), darkolivegreen, 30px, 30px, darkslategray, 3px); }\n\n  &.mx--to-north {\n    @include triangle-pretty(bottom, (left: 50%, top: 0), darkslategray, 30px, 30px, darkolivegreen, 3px); } }\n\n.mx-mathsass {\n  @include size(320px, 200px);\n  padding: 10px;\n  text-align: center;\n  cursor: default; }\n\n.mx-mathsass__inner {\n  display: inline-block;\n  vertical-align: middle;\n  max-width: 90%;\n  @include size(240px, 50px);\n  transform: rotate(rad-to-deg(atan(1))); }\n\n.mx-font {\n  padding: 1em;\n  background-color: white;\n\n  .mx-font--01 {\n    @include font(1.4rem, 1.5); }\n\n  .mx-font--02 {\n    @include font(1.7rem, 1.8); }\n\n  .mx-font--03 {\n    @include font(2.1rem, 1.2); } }\n","@import \"variables\";\n@import \"functions\";\n\n@import \"../../libs/mathsass/dist/math\";\n@import \"../../libs/mathsass/dist/functions/tan\";\n\n////\n/// @author Astronim* Serhiy Ilchenko\n/// @access public\n///\n\n// =============================================================================\n// size\n// =============================================================================\n/// Примесь позволяет определять `width` и `height` одновременно.\n///\n/// @param {Length} $width - `width` элемента\n/// @param {Length} $height ($width) - `height` элемента\n///\n/// @example Sass - Использование\n/// .foo\n///   +size(10em)\n///\n/// .bar\n///   +size(100%, 10em)\n///\n/// @example css - Вывод CSS\n/// .foo {\n///   width: 10em;\n///   height: 10em;\n/// }\n///\n/// .bar {\n///   width: 100%;\n///   height: 10em;\n/// }\n\n@mixin size($width, $height: $width) {\n  width: $width;\n  height: $height; }\n\n// =============================================================================\n// Position\n// =============================================================================\n/// Примесь устанавливает верхнюю и левую координаты\n///\n/// @param {Length} $t [0] - верхняя координата\n/// @param {Length} $l [0] - левая координата\n///\n/// @example Sass - Использование\n/// @example css - Вывод CSS\n\n@mixin position($t: 0, $l: $t) {\n  top: $t;\n  left: $l; }\n\n// =============================================================================\n// font\n// =============================================================================\n/// Примесь добавляет одновремменно `font-size` и `line-height`\n/// Используются переменный `$font-size` и `$line-height`\n///\n/// @param {Length} $width - `width` элемента\n/// @param {Length} $height ($width) - `height` элемента\n///\n/// @example Sass - Использование\n/// .foo\n///   +font(1.4rem, 1.5)\n///\n/// @example css - Вывод CSS\n/// .foo {\n///   font-size: 1.4rem;\n///   line-height: 1.5;\n/// }\n\n@mixin font($font-size: inherit, $line-height: inherit) {\n  font-size: $font-size;\n  line-height: $line-height; }\n\n// =============================================================================\n// display inline block + vertical align\n// =============================================================================\n/// Примесь задает пару свойст display: inline-block и vertical-align для\n/// выравнивания инлайн-блок элементов по вертикали\n@mixin display-inline-block-top() {\n  display: inline-block;\n  vertical-align: top; }\n\n@mixin display-inline-block-middle() {\n  display: inline-block;\n  vertical-align: middle; }\n\n@mixin display-inline-block-bottom() {\n  display: inline-block;\n  vertical-align: baseline; }\n\n// =============================================================================\n// pseudo\n// =============================================================================\n/// Примесь добавляет к псевдоэлементу базовые свойства.\n///\n/// @param {String} $content [''] - контент псевдоэлемента\n/// @param {String} $display [block] - тип псевдоэлемента\n/// @param {String} $pos [absolute] - позицирование псевдоэлемента\n///\n/// @example Sass - Использование\n///\n/// .foo\n///   &::before\n///     +pseudo()\n///\n/// .foo\n///   &::before\n///     +pseudo(attr(data), inline-block, relative)\n///\n/// @example css - Вывод CSS\n///\n/// .foo::before {\n///   content: '';\n///   display: block;\n///   position: absolute;\n/// }\n///\n/// .foo::before {\n///   content: attr(data);\n///   display: inline-block;\n///   position: relative;\n/// }\n\n@mixin pseudo($content: '', $display: block, $pos: absolute) {\n  content: $content;\n  display: $display;\n  position: $pos; }\n\n@mixin pseudo-block-relative($content: '') {\n  @include pseudo($content: $content, $display: block, $pos: relative); }\n\n@mixin pseudo-relative($content: '') {\n  @include pseudo($content: $content, $display: null, $pos: relative); }\n\n@mixin pseudo-inline-block($content: '') {\n  @include pseudo($content: $content, $display: inline-block, $pos: null); }\n\n@mixin pseudo-inline-block-relative($content: '') {\n  @include pseudo($content: $content, $display: inline-block, $pos: relative); }\n\n@mixin pseudo-content($content: '') {\n  @include pseudo($content: $content, $display: null, $pos: null); }\n\n// =============================================================================\n// antialiased\n// =============================================================================\n/// Нормализует отображение текста, если к нему применяется анимированная трансформация\n///\n/// @param {} hasn't params\n///\n/// @example Sass - Использование\n/// @example css - Вывод CSS\n\n@mixin antialiased() {\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n// =============================================================================\n// clear\n// =============================================================================\n/// Помощник для сброса внутреннего обтекания\n/// @author Николас Галлагер\n/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix\n\n@mixin clear() {\n  &::after {\n    content: '';\n    display: table;\n    clear: both; } }\n\n// =============================================================================\n// truncate\n// =============================================================================\n/// Обрезает текст и добавляет троеточие\n///\n/// @param {Length} $max-width [320px] - максиальная ширина элемента\n///\n/// @example Sass - Использование\n/// @example css - Вывод CSS\n\n@mixin truncate($max-width: 320px) {\n  max-width: $max-width;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden; }\n\n// =============================================================================\n// margin-horizontal / margin-vertical / padding-horizontal / padding-vertical\n// =============================================================================\n/// Примеси добавляют горизонтальные/вертикальные внешние/внутренние отстпупы (`margin/padding`)\n/// в развернутом виде.\n///\n/// @param {Length} $left [null] - левый `margin/padding` элемента\n/// @param {Length} $right [$left] - правый `margin/padding` элемента\n/// @param {Length} $top [null] - верхний `margin/padding` элемента\n/// @param {Length} $bottom [$top] - нижний `margin/padding` элемента\n///\n/// @example Sass - Использование\n///\n/// .foo\n///   +margin-horizontal(20px)\n///\n/// .foo\n///   +margin-horizontal(20px, 10px)\n///\n/// @example css - Вывод CSS\n///\n/// .foo {\n///   margin-left: 20px;\n///   margin-right: 20px;\n/// }\n///\n/// .foo {\n///   margin-left: 20px;\n///   margin-right: 10px;\n/// }\n\n@mixin margin-horizontal($left, $right: $left) {\n  margin: {\n    right: $right;\n    left: $left; } }\n\n@mixin margin-vertical($top, $bottom:$top) {\n  margin: {\n    top: $top;\n    bottom: $bottom; } }\n\n@mixin padding-horizontal($left, $right: $left) {\n  padding: {\n    right: $right;\n    left: $left; } }\n\n@mixin padding-vertical($top, $bottom:$top) {\n  padding: {\n    top: $top;\n    bottom: $bottom; } }\n\n// =============================================================================\n// margin / padding\n// =============================================================================\n/// Примеси добавляют внешние/внутренние отстпупы (`margin/padding`) в развернутом виде.\n/// Значения можно добавлять поочередно: верхний, правый, нижний, левый.\n/// Пропустить значение можно задав ему null.\n/// Значения также можно добавлять через ключ: $t, $r, $b, $l, - соответственно.\n/// Если заданно четыре значения не равных null, то `margin` будет в сокращенном виде.\n///\n/// @param {Length} $t [null] - верхний `margin/padding` элемента\n/// @param {Length} $r [null] - правый `margin/padding` элемента\n/// @param {Length} $b [null] - нижний `margin/padding` элемента\n/// @param {Length} $l [null] - левый `margin/padding` элемента\n///\n/// @example Sass - Использование\n///\n/// .foo\n///   +margin(10px, null, 30px, 40px)\n///\n/// @example css - Вывод CSS\n///\n/// .foo {\n///   margin-top: 10px;\n///   margin-bottom: 30px;\n///   margin-left: 40px;\n/// }\n\n@mixin margin($top: null, $right: null, $bottom: null, $left: null) {\n  @if ($top and $right and $bottom and $left) {\n    margin: $top $right $bottom $left; }\n\n  @else {\n    margin: {\n      @if $top {\n        top: $top; }\n      @if $right {\n        right: $right; }\n      @if $bottom {\n        bottom: $bottom; }\n      @if $left {\n        left: $left; } } } }\n\n@mixin padding($top: null, $right: null, $bottom: null, $left: null) {\n  @if ($top and $right and $bottom and $left) {\n    padding: $top $right $bottom $left; }\n\n  @else {\n    padding: {\n      @if $top {\n        top: $top; }\n      @if $right {\n        right: $right; }\n      @if $bottom {\n        bottom: $bottom; }\n      @if $left {\n        left: $left; } } } }\n\n/// Примесь центрирует блочный элемент с ограниченной шириной.\n///\n/// @example Sass - Использование\n///\n/// .foo\n///   +push-auto\n///\n/// @example css - Вывод CSS\n///\n/// .foo {\n///   margin-left: auto;\n///   margin-right: auto;\n/// }\n\n@mixin push-auto() {\n  @include margin-horizontal(auto); }\n\n/// Примесь позволяет сохранять пропорции элементов при респонсиве\n///\n/// @param {Number} $x [1] - ширина в пропорциональном соотношении\n/// @param {Number} $y [1] - высота в пропорциональном соотношении\n/// @param {Boolean} $pseudo [false] - указывает добавлять псевдоэлемент или\n/// использовать `padding` самого элемента\n///\n/// @example Sass - Использование\n///\n/// .foo\n///   +responsive-ratio(1)\n///\n/// .foo\n///   +responsive-ratio(16, 9)\n///\n/// .foo\n///   +responsive-ratio(4, 3, true)\n///\n/// @example css - Вывод CSS\n///\n/// .foo {\n///   padding-top: 100%\n/// }\n///\n/// .foo {\n///   padding-top: 56.25%\n/// }\n///\n/// .foo::before {\n///   content: \"\";\n///   display: block;\n///   position: relative;\n///   height: 0;\n///   width: 100%;\n///   padding-top: 75%;\n/// }\n\n@mixin ratio($x: 1, $y: 1, $pseudo: false) {\n  $padding: round-float($y / $x * 100%, 2);\n\n  @if $pseudo {\n    &::before {\n      @include pseudo($pos: relative);\n\n      height: 0;\n      padding-top: $padding; } }\n\n  @else {\n    height: 0;\n    padding-top: $padding; } }\n\n// =============================================================================\n// Сentering\n// =============================================================================\n/// Примесь центрирует элемент относительно родителя\n///\n/// @param {Boolean} $transform [true] - направление выравнивания\n///\n/// @example Sass - Использование\n/// @example css - Вывод CSS\n@mixin centering($width: null, $height: null, $transform: true, $pos: absolute) {\n  position: $pos;\n  left: 50%;\n  top: 50%;\n\n  @if $transform {\n    transform: translate(-50%, -50%); }\n\n  @else {\n    width: $width;\n    height: $height;\n    @include margin($top: round(-$height*0.5), $left: round(-$width*0.5)); } }\n\n/// 1.1 С помощью \"transform: translate\" без позициирования:\n@mixin centering-transform($pos: null) {\n  position: $pos;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%); }\n\n/// 1.2 С помощью \"transform: translate\" + \"position: absolute\":\n@mixin centering-transform-abs() {\n  @include centering-transform($pos: absolute); }\n\n/// 1.3 С помощью \"transform: translate\" + \"position: relative\":\n@mixin centering-transform-rel() {\n  @include centering-transform($pos: relative); }\n\n/// 2. С помощью margin:\n@mixin centering-margin($width: null, $height: null, $pos: null) {\n  position: $pos;\n  left: 50%;\n  top: 50%;\n  @include margin($top: round(-$height*0.5), $left: round(-$width*0.5)); }\n\n// =============================================================================\n// Reset for inline-block elements\n// =============================================================================\n/// обнуляет горизонтальные отступы между `inline-block` елементами\n@mixin clear-spacing() {\n  font-size: 0;\n  letter-spacing: -4px; }\n\n// =============================================================================\n// Grid Item\n// =============================================================================\n/// Формирует упрощенную сетку элементов с применением `display: inline-block`, или `float: left`;\n/// Для родителя наобходимо подключить `+grid-parent`;\n/// В случае с `inline-block` обнулить `font:size` и `letter-spacing` (примесь `+clear-spacing`)\n/// На оберту родителя при необходимости задать `overflow: hidden`;\n/// Для дочерних элементов необходимо подключить `+grid-item` или `+grid-item-float`;\n///\n/// @param {Length} $horizontal-space [20px] - горизонтальные отступы между элементами\n/// @param {Length} $length-in-row [2] - количество элементов в ряду\n/// @param {Length} $bottom-space [$horizontal-space] - нижние отступы элементов\n///\n/// @example Sass - Использование\n/// @example css - Вывод CSS\n\n@mixin grid-parent($horizontal-space: 20px) {\n  margin: {\n    @if $horizontal-space == 0 {\n      left: 0;\n      right: 0; }\n    @else {\n      left: -#{round($horizontal-space/2)};\n      right: -#{round($horizontal-space/2)}; } } }\n\n@mixin grid-item($length-in-row: 1, $horizontal-space: 20px, $bottom-space: $horizontal-space) {\n  display: inline-block;\n  vertical-align: top;\n  width: round-float(100%/$length-in-row, 2);\n  padding: {\n    left: round($horizontal-space/2);\n    right: round($horizontal-space/2); }\n\n  &:nth-child(n) {\n    margin-top: $bottom-space; }\n\n  &:nth-child(-n+#{$length-in-row}) {\n    margin-top: 0; } }\n\n/// использовать если нужно только поменять количество колонок\n@mixin grid-item-responsive($length-in-row: 1, $horizontal-space: 20px, $bottom-space: $horizontal-space) {\n  width: round-float(100%/$length-in-row, 2);\n  padding: {\n    left: round($horizontal-space/2);\n    right: round($horizontal-space/2); }\n\n  &:nth-child(n) {\n    margin-top: $bottom-space; }\n\n  &:nth-child(-n+#{$length-in-row}) {\n    margin-top: 0; } }\n\n@mixin grid-item-float($length-in-row: 1, $horizontal-space: 20px, $bottom-space: $horizontal-space) {\n  float: left;\n  width: round-float(100%/$length-in-row, 2);\n  padding: {\n    left: round($horizontal-space/2);\n    right: round($horizontal-space/2); }\n\n  &:nth-child(n) {\n    margin-top: $bottom-space;\n    clear: none; }\n\n  &:nth-child(-n+#{$length-in-row}) {\n    margin-top: 0; }\n\n  &:nth-child(#{$length-in-row}n+1) {\n    clear: left; } }\n\n/// использовать если нужно только поменять количество колонок\n@mixin grid-item-float-responsive($length-in-row: 1, $horizontal-space: 0, $bottom-space: $horizontal-space) {\n  width: round-float(100%/$length-in-row, 2);\n  padding: {\n    left: round($horizontal-space/2);\n    right: round($horizontal-space/2); }\n\n  &:nth-child(n) {\n    margin-top: $bottom-space;\n    clear: none; }\n\n  &:nth-child(-n+#{$length-in-row}) {\n    margin-top: 0; }\n\n  &:nth-child(#{$length-in-row}n+1) {\n    clear: left; } }\n\n// =============================================================================\n// Fill parent with absolute or relative position or without position\n// =============================================================================\n/// Примесь задает блочному элемунту размеры родителя\n///\n/// @param {} no param\n///\n/// @example Sass - Использование\n///\n/// img.foo\n///   +cover\n///\n/// img.foo\n///   +cover-rel()\n///\n/// @example css - Вывод CSS\n///\n/// img.foo {\n///   left: 0;\n///   top: 0;\n///   width: 100%;\n///   height: 100%;\n/// }\n///\n/// img.foo {\n///   position: relative\n///   left: 0;\n///   top: 0;\n///   width: 100%;\n///   height: 100%;\n/// }\n\n@mixin cover($position: null) {\n  @if $position {\n    position: $position; }\n  @include position(0, 0);\n  @include size(100%); }\n\n@mixin cover-abs() {\n  @include cover($position: absolute); }\n\n@mixin cover-rel() {\n  @include cover($position: relative); }\n\n/// Примесь позволяет указывает изображению способ заполнения блока,\n/// в котором находится\n/// Для ie9 необходимо подключить скрипт и прописать дополнительные свойства\n/// @link https://medium.com/@primozcigler/neat-trick-for-css-object-fit-fallback-on-edge-and-other-browsers-afbc53bbb2c3#.e3eu6mvxl\n///\n/// @param {String} $fit [cover] - метод заполнения\n/// @param {String} $pos [relative] - тип позиционирования\n///\n/// @example Sass - Использование\n///\n/// img.foo\n///   +object-fit-position\n///\n/// @example css - Вывод CSS\n///\n/// img.foo {\n///   position: relative\n///   top: 50%\n///   left: 50%\n///   max-width: none\n///   width: auto\n///   min-width: 100%\n///   min-height: 100%\n///   transform: translate(-50%, -50%)\n///   object-fit: cover\n/// }\n\n@mixin object-fit-position($fit: cover, $pos: relative) {\n  position: $pos;\n  top: 50%;\n  left: 50%;\n  min-width: 0;\n  min-height: 0;\n  max-width: none;\n  max-height: none;\n  height: 100%;\n  width: 100%;\n  transform: translate(-50%, -50%);\n  backface-visibility: hidden;\n  object-fit: $fit; }\n\n/// This mixin can be used to set the object-fit:\n/// +object-fit(contain)\n///\n/// or object-fit and object-position:\n/// +object-fit(cover, top)\n\n/// need to add this rules\n/// display: block\n/// width: 100%\n/// height: 100%\n/// max-width: none\n\n@mixin object-fit($fit: fill, $position: null) {\n  //-o-object-fit: $fit\n  object-fit: $fit;\n  @if $position {\n    //-o-object-position: $position\n    object-position: $position;\n    font-family: 'object-fit: #{$fit}; object-position: #{$position}'; }\n  @else {\n    font-family: 'object-fit: #{$fit}'; } }\n\n// =============================================================================\n// Hide text for screen reader\n// =============================================================================\n/// Примесь скрывает текст, который остается видимым для генераторов речи\n\n@mixin hide-text() {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n\n  &:active, &:focus {\n    clip: auto;\n    height: auto;\n    margin: 0;\n    overflow: visible;\n    position: static;\n    width: auto; } }\n\n// =============================================================================\n// Input placeholder\n// =============================================================================\n/// @param {} - нет параметров\n///\n/// @example Sass - Использование\n/// .foo\n/// \t+placeholder\n/// \t\tcolor: green\n///\n/// +placeholder\n/// \tcolor: red\n///\n/// @example css - Вывод CSS\n/// .foo::-webkit-input-placeholder {\n/// \tcolor: green;\n/// }\n/// .foo:-moz-placeholder {\n/// \tcolor: green;\n/// }\n/// .foo::-moz-placeholder {\n/// \tcolor: green;\n/// }\n/// .foo:-ms-input-placeholder {\n/// \tcolor: green;\n/// }\n/// .foo.placeholder {\n/// \tcolor: green;\n/// }\n///\n/// ::-webkit-input-placeholder {\n/// \tcolor: red;\n/// }\n/// :-moz-placeholder {\n/// \t\tcolor: red;\n/// }\n/// ::-moz-placeholder {\n/// \tcolor: red;\n/// }\n/// :-ms-input-placeholder {\n/// \t\tcolor: red;\n/// }\n/// .placeholder {\n/// \t\tcolor: red;\n/// }\n\n@mixin optional-at-root($sel) {\n  @at-root #{if(not &, $sel, selector-append(&, $sel))} {\n    @content; } }\n\n@mixin placeholder() {\n  @include optional-at-root('::-webkit-input-placeholder') {\n    @content; }\n\n  @include optional-at-root(':-moz-placeholder') {\n    @content; }\n\n  @include optional-at-root('::-moz-placeholder') {\n    opacity: 1;\n    @content; }\n\n  @include optional-at-root(':-ms-input-placeholder') {\n    opacity: 1;\n    @content; }\n\n  @include optional-at-root('.placeholder') {\n    @content; } }\n\n@mixin placeholder-focus() {\n  @include optional-at-root(':focus::-webkit-input-placeholder') {\n    @content; }\n\n  @include optional-at-root(':focus:-moz-placeholder') {\n    @content; }\n\n  @include optional-at-root(':focus::-moz-placeholder') {\n    @content; }\n\n  @include optional-at-root(':focus:-ms-input-placeholder') {\n    @content; }\n\n  @include optional-at-root('.placeholder:focus') {\n    @content; } }\n\n@mixin placeholder-hover() {\n  @include optional-at-root(':hover::-webkit-input-placeholder') {\n    @content; }\n\n  @include optional-at-root(':hover:-moz-placeholder') {\n    @content; }\n\n  @include optional-at-root(':hover::-moz-placeholder') {\n    @content; }\n\n  @include optional-at-root(':hover:-ms-input-placeholder') {\n    @content; }\n\n  @include optional-at-root('.placeholder:hover') {\n    @content; } }\n\n@mixin placeholder-active() {\n  @include optional-at-root(':active::-webkit-input-placeholder') {\n    @content; }\n\n  @include optional-at-root(':active:-moz-placeholder') {\n    @content; }\n\n  @include optional-at-root(':active::-moz-placeholder') {\n    @content; }\n\n  @include optional-at-root(':active:-ms-input-placeholder') {\n    @content; }\n\n  @include optional-at-root('.placeholder:active') {\n    @content; } }\n\n// =============================================================================\n// Scroll lock\n// =============================================================================\n/// Примесь блокирования прокрутки страницы.\n///\n/// @param hasn't params\n\n@mixin scroll-blocked() {\n  width: 100% !important;\n  height: 100% !important;\n  max-width: 100% !important;\n  max-height: 100% !important;\n  margin: 0 !important;\n  padding: 0 !important;\n  overflow: hidden !important; }\n\n// =============================================================================\n// Triangle helper mixin\n// =============================================================================\n/// Примесь созадает простую стрелку-треугольник\n/// Применяется к псевдоэлементу\n/// Triangle helper mixin\n/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`\n/// @param {Color} $color [currentcolor] - Triangle color\n/// @param {Length} $size [1em] - Triangle size\n/// @param {Number} $kef [1em] - Higher-to-base ratio\n///\n/// @example Sass - Использование\n///\n/// .foo::before\n/// \t+triangle(bottom)\n/// \tposition: absolute\n/// \tleft: 50%\n/// \tbottom: 100%\n///\n/// @example css - Вывод CSS\n///\n/// .foo::before {\n/// \twidth: 0;\n/// \theight: 0;\n/// \tcontent: '';\n/// \tz-index: 2;\n/// \tborder-top: 1.5em solid tomato;\n/// \tborder-left: 1em solid transparent;\n/// \tborder-right: 1em solid transparent;\n/// \tposition: absolute;\n/// \tleft: 50%;\n/// \tbottom: 100%;\n/// }\n@mixin triangle($direction, $color: tomato, $size: 1em, $kef: 1.5) {\n  @if not index(top right bottom left, $direction) {\n    @error \"Direction must be either `top`, `right`, `bottom` or `left`.\"; }\n\n  //+pseudo()\n  width: 0;\n  height: 0;\n  z-index: 2;\n  border-#{opposite-direction($direction)}: (round($size * $kef)) solid $color;\n\n  $perpendicular-borders: $size solid transparent;\n\n  @if $direction == top or $direction == bottom {\n    border-left: $perpendicular-borders;\n    border-right: $perpendicular-borders; }\n  @else if $direction == right or $direction == left {\n    border-bottom: $perpendicular-borders;\n    border-top: $perpendicular-borders; } }\n\n// =============================================================================\n// triangle pretty\n// =============================================================================\n/// Примесь формирует стрелку-треугольник с бордером\n/// Применяется к самому элементу, а стрелка-треугольник формируется из псевдоэлементов ::before, ::after\n/// Необходимо подключить плагин mathsass https://www.npmjs.com/package/mathsass\n/// Примесь требует доработки! Действует с ограничениями!\n/// Для правильной работи необходимо строго придерживаться правил добавления параметров\n///\n/// @param {Direction} $direction - Направление стрелки-треугольника: `top`, `right`, `bottom` or `left`\n/// @param {Map} $origins-map [] - Расположение стрелки-треугольника относительно родительского элемента\n///                                Например: (top: 50%, left: 100%) - по правому краю по центру\n///                                Задавать значения необходимо придерживая двух правил:\n///                                1) по первому из значений стрелка-треугольник будет смещена\n///                                   в противоположную сторону на половину ширины основания;\n///                                2) значений должно быть не больше двух, что логично.\n///                                Если нужно разместить стрелку внизу по центру, то значения должны быть такими:\n///                                (right: 50%, bottom: 0) либо (left: 50%, bottom: 0)\n/// @param {Color} $color [brown] - Цвет стрелки-треугольника\n/// @param {Length} $size-towards [30px] - Высота стрелки-треугольника с учетом бордера\n///                                      (от основания до вершины указвающей направление)\n/// @param {Length} $size-across [$size-towards] - Ширина стрелки-треугольника с учетом бордера\n///                                               (ширина основания противоположного вершине указвающей направление)\n/// @param {Color} $bd-color [tomato] - Цвет бордера стрелки-треугольника\n/// @param {Length} $bd-width [2px] - Цвет бордера стрелки-треугольника\n///\n/// @example Sass - Использование\n///\n/// .foo\n///   +triangle-pretty(bottom, (right: 50%, top: 100%), darkolivegreen, 30px, 30px, darkslategray, 3px)\n///\n/// @example css - Вывод CSS\n///\n// .foo::before,\n// .foo::after{\n//   content: \"\";\n//   display: block;\n//   position: absolute;\n//   top: 100%;\n//   right: 50%;\n//   pointer-events: none;\n// }\n// .foo::before{\n//   z-index: 2;\n//   margin-right: -15px;\n//   border-top: 30px solid darkslategray;\n//   border-left: 15px solid transparent;\n//   border-right: 15px solid transparent;\n// }\n// .foo::after{\n//   z-index: 3;\n//   margin-right: -12px;\n//   border-top: 23px solid darkolivegreen;\n//   border-left: 12px solid transparent;\n//   border-right: 12px solid transparent;\n// }\n\n@mixin triangle-pretty($direction, $origins-map: (), $color: brown, $size-towards: 30px, $size-across: $size-towards, $bd-color: tomato, $bd-width: 2px) {\n  @if not index(top right bottom left, $direction) {\n    @error \"Direction must be either `top`, `right`, `bottom` or `left`.\"; }\n\n  $unit-size-toward: unit($size-towards);\n  $unit-size-across: unit($size-across);\n\n  @if $unit-size-across != $unit-size-across {\n    @error \"Значение высоты треугольника и его основания должны быть в одинаковых единицах измерения\"; }\n\n  // переменные для смещения стрелки-треугольника назад на половину ширины основания\n  $top: null;\n  $right: null;\n  $bottom: null;\n  $left: null;\n  $margin-direct: null;\n  $i: 0;\n\n  // определение направления и величины смещения\n  @each $origin, $value in $origins-map {\n    @if $i == 0 {\n      $margin-direct: $origin; }\n    //@debug $margin-direct\n\n    $i: $i + 1;\n\n    @if $origin == top {\n      $top: $value; }\n    //@debug 'top: ' + $value\n    @if $origin == right {\n      $right: $value; }\n    //@debug 'right: ' + $value\n    @if $origin == bottom {\n      $bottom: $value; }\n    //@debug 'bottom: ' + $value\n    @if $origin == left {\n      $left: $value; } }\n  //@debug 'left: ' + $value\n\n  // вывод общих стилей\n  &::before, &::after {\n    @include pseudo();\n    top: $top;\n    right: $right;\n    bottom: $bottom;\n    left: $left;\n    pointer-events: none; }\n\n  // вывод стилей большой (внешней) стрелки-треугольника\n  &::before {\n    z-index: 2;\n    @if $margin-direct {\n      margin-#{$margin-direct}: -#{$size-across*0.5}; }\n    border-#{opposite-direction($direction)}: $size-towards solid $bd-color;\n\n    $perpendicular-borders: (round($size-across * 0.5)) solid transparent;\n\n    @if $direction == top or $direction == bottom {\n      border-left: $perpendicular-borders;\n      border-right: $perpendicular-borders; }\n    @else if $direction == right or $direction == left {\n      border-bottom: $perpendicular-borders;\n      border-top: $perpendicular-borders; } }\n\n  // рассчет маленькой стрелки-треугольника по размеру бордера\n  $tg-angle: (2*$size-towards/$size-across);\n  $angle: atan($tg-angle);\n  $sin-angle: sin($angle);\n  $height-large: $size-across*$sin-angle;\n  $height-small: $height-large - $bd-width*2;\n  $small-size-across: $height-small/$sin-angle;\n  $small-size-toward: $small-size-across/2*$tg-angle;\n\n  // вывод стилей маленькой (внутренней) стрелки-треугольника\n  &::after {\n    z-index: 3;\n    @if $margin-direct {\n      margin-#{$margin-direct}: -(round($small-size-across*0.5)); }\n    border-#{opposite-direction($direction)}: round($small-size-toward) solid $color;\n\n    $perpendicular-borders: (round($small-size-across * 0.5)) solid transparent;\n\n    @if $direction == top or $direction == bottom {\n      border-left: $perpendicular-borders;\n      border-right: $perpendicular-borders; }\n    @else if $direction == right or $direction == left {\n      border-bottom: $perpendicular-borders;\n      border-top: $perpendicular-borders; } } }\n\n// =============================================================================\n// Leaner gradient -vendor\n// =============================================================================\n/// Convert angle\n/// @author Chris Eppstein\n/// @param {Number} $value - Value to convert\n/// @param {String} $unit - Unit to convert to\n/// @return {Number} Converted angle\n///\n@function convert-angle($value, $unit) {\n  $convertable-units: deg grad turn rad;\n  $conversion-factors: 1 (10grad / 9deg) (1turn / 360deg) (3.14159rad / 180deg);\n\n  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {\n    @return $value / nth($conversion-factors, index($convertable-units, unit($value))) * nth($conversion-factors, index($convertable-units, $unit)); }\n\n  @warn \"Cannot convert `#{unit($value)}` to `#{$unit}`.\"; }\n\n/// Test if `$value` is an angle\n/// @param {*} $value - Value to test\n/// @return {Bool}\n///\n@function is-direction($value) {\n  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);\n  $is-angle: type-of($value) == \"number\" and index(\"deg\" \"grad\" \"turn\" \"rad\", unit($value));\n\n  @return $is-direction or $is-angle; }\n\n/// Convert a direction to legacy syntax\n/// @param {Keyword | Angle} $value - Value to convert\n/// @require {function} is-direction\n/// @require {function} convert-angle\n///\n@function legacy-direction($value) {\n  @if is-direction($value) == false {\n    @warn \"Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction\"; }\n\n  $conversion-map: (to top: bottom, to top right: bottom left, to right top: left bottom, to right: left, to bottom right: top left, to right bottom: left top, to bottom: top, to bottom left: top right, to left bottom: right top, to left: right, to left top: right bottom, to top left: bottom right);\n\n  @if map-has-key($conversion-map, $value) {\n    @return map-get($conversion-map, $value); }\n\n  @return 90deg - convert-angle($value, \"deg\"); }\n\n/// Mixin printing a linear-gradient\n/// as well as a plain color fallback\n/// and the `-webkit-` prefixed declaration\n/// @param {String | List | Angle} $direction - Linear gradient direction\n/// @param {Arglist} $color-stops - List of color-stops composing the gradient\n///\n@mixin linear-gradient($direction, $color-stops...) {\n  @if is-direction($direction) == false {\n    $color-stops: $direction, $color-stops;\n    $direction: 180deg; }\n\n  background: nth(nth($color-stops, 1), 1);\n  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);\n  background: linear-gradient($direction, $color-stops); }\n\n// Tests\n//.test-1\n//\t+linear-gradient(#31B7D7, #EDAC7D)\n//\n//.test-2\n//\t+linear-gradient(to right, #E47D7D 0%, #C195D3 50%, #4FB4E8 100%)\n//\n//.test-3\n//\t+linear-gradient(42deg, #B58234 0%, #D2B545 50%, #D7C04D 50.01%, #FFFFFF 100%)\n\n\n// =============================================================================\n// Font Face Generator\n// =============================================================================\n/// Примесь генерирует подключение @font-face шрифтов\n///\n/// @author []\n///\n/// @param {String} $name [] - название шрифта\n/// @param {String} $path [] - путь к шрифту включая файл без расширения\n/// @param {String} $weight [null] - значение `font-weight`\n/// @param {String} $style [null] - значение `font-style`\n/// @param {Map} $exts [eot woff2 woff ttf svg] - мапа расширений шрифта\n///\n/// @example Sass - Использование\n///\n/// +font-face(\"candara\", \"../fonts/candara/regular/candara\", normal, normal, eot woff ttf svg)\n///\n/// @example css - Вывод CSS\n///\n/// @font-face{\n///   font-family: \"название-шрифта\";\n///   font-style: normal;\n///   font-weight: normal;\n///   src: url(\"../fonts/candara/regular/candara.eot?\") format(\"eot\"), url(\"../fonts/candara/regular/candara.woff\") format(\"woff\"), url(\"../fonts/candara/regular/candara.ttf\") format(\"truetype\"), url(\"../fonts/candara/regular/candara.svg#candara-regular\") format(\"svg\");\n/// }\n\n@function str-replace($string, $search, $replace: \"\") {\n  $index: str-index($string, $search);\n\n  @if $index {\n    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace); }\n\n  @return $string; }\n\n@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {\n  $src: null;\n\n  $extmods: (eot: \"?\", svg: \"#\" + str-replace($name, \" \", \"_\"));\n\n  $formats: (otf: \"opentype\", ttf: \"truetype\");\n\n  @each $ext in $exts {\n    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\n    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\n    $src: append($src, url(quote($path + \".\" + $extmod)) format(quote($format)), comma); }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: $style;\n    font-weight: $weight;\n    src: $src; } }\n\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n// ПРИМЕСИ ИСПОЛЬЗУЕМЫЕ В ТИОПОГРАФИЧЕСКИХ СТИЛЯХ\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n// ПРИМЕСИ ИСПОЛЬЗУЕМЫЕ В ТИПОГРАФИЧЕСКИХ СТИЛЯХ конец\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n// ПРИМЕСИ ДЛЯ ПРИНТ ВЕРСИИ\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n@mixin print-reset() {\n  display: block !important;\n  float: none !important;\n  position: relative !important;\n  overflow: visible !important;\n  height: auto !important;\n  min-height: 0 !important;\n  max-height: none !important;\n  width: auto !important;\n  min-width: 0 !important;\n  max-width: none !important;\n  left: auto !important;\n  top: auto !important;\n  right: auto !important;\n  bottom: auto !important;\n  padding: 0 !important;\n  margin: 0 !important;\n  transform: none !important;\n  text-align: left !important;\n  border: none !important;\n  box-shadow: none !important;\n  opacity: 1 !important;\n  visibility: visible !important;\n  z-index: auto !important; }\n\n@mixin prints-space-bottom-sm() {\n  margin-top: 0 !important;\n  margin-bottom: 0.5cm !important;\n  padding-bottom: 0 !important; }\n\n@mixin prints-space-bottom-md() {\n  margin-top: 0 !important;\n  margin-bottom: 1cm !important;\n  padding-bottom: 0 !important; }\n\n@mixin prints-space-bottom-lg() {\n  margin-bottom: 1.5cm !important;\n  padding-bottom: 0 !important; }\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n// ПРИМЕСИ ДЛЯ ПРИНТ ВЕРСИИ конец\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n","@import \"../utils/functions\";\n@import \"../utils/placeholders\";\n\n// ==========================================================================\n// Variables\n// ==========================================================================\n\n// Medium query\n//$breakpoints: ('mob-sm': 320px, 'mob-md': 480px, 'mob-lg': 640px, 'tab-sm': 768px, 'tab-lg': 992px, 'desk-sm': 1200px, 'desk-md': 1366px, 'desk-lg': 1600px, 'desk-hd': 1920px)\n$breakpoints: ('desk-qhd': 2560px, 'desk-hd': 1920px, 'desk-lg': 1600px, 'desk-ml': 1440px, 'desk-md': 1366px, 'desk-sm': 1200px, 'tab-lg': 992px, 'tab-sm': 768px, 'mob-lg': 640px, 'mob-md': 480px, 'mob-sm': 320px);\n\n// Fonts style\n// ==========================================================================\n$font-norm: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\" !default;\n$font-alt: Georgia, serif !default;\n\n// Reset font-weight and font-style\n// Use for font-face\n@mixin font-reset() {\n  font: {\n    weight: normal;\n    style: normal; } }\n\n// Main font\n@mixin font-normal() {\n  font-family: $font-norm; }\n\n@mixin font-bold() {\n  font-weight: bold; }\n\n@mixin font-italic() {\n  font-style: italic; }\n\n@mixin font-bold-italic() {\n  font-weight: bold;\n  font-style: italic; }\n\n// Alternative font\n@mixin font-alt() {\n  font-family: $font-alt; }\n\n@mixin font-alt-bold() {\n  font-family: $font-alt;\n  font-weight: bold; }\n\n@mixin font-alt-bold-italic() {\n  font-family: $font-alt;\n  font-weight: bold;\n  font-style: italic; }\n\n// Base\n// ==========================================================================\n\n$font-size: 1.6rem !default;\n$line-height: round-float(2.4rem/$font-size, 2) !default;\n// ----------------------------------------------------\n$font-size--small: 1.4rem !default;\n$line-height--small: round-float(2.4rem/$font-size--small, 2) !default;\n// ----------------------------------------------------\n$font-size--smallest: 1.2rem !default;\n$line-height--smallest: round-float(2.0rem/$font-size--smallest, 2) !default;\n// ----------------------------------------------------\n$letter-spacing: normal !default;\n\n// Heading h1\n$font-size-h1: 4.8rem !default;\n$line-height-h1: round-float(6.0rem/$font-size-h1, 2) !default;\n// ----------------------------------------------------\n$font-size-h1--md: 3.6rem !default;\n$line-height-h1--md: round-float(4.8rem/$font-size-h1--md, 2) !default;\n// ----------------------------------------------------\n$font-size-h1--sm: 3.0rem !default;\n$line-height-h1--sm: round-float(4.2rem/$font-size-h1--sm, 2) !default;\n// ----------------------------------------------------\n@mixin font-h1() {\n  font-size: $font-size-h1;\n  line-height: $line-height-h1;\n\n  @include media('<tab-lg') {\n    font-size: $font-size-h1--md;\n    line-height: $line-height-h1--md; }\n\n  @include media('<mob-lg') {\n    font-size: $font-size-h1--sm;\n    line-height: $line-height-h1--sm; } }\n\n// Heading h2\n$font-size-h2: round-float($font-size-h1*3.6rem/4.8rem, 1) !default;\n$line-height-h2: round-float(4.8rem/3.6rem, 2) !default;\n// ----------------------------------------------------\n$font-size-h2--md: round-float($font-size-h1--md*0.84, 1) !default;\n$line-height-h2--md: round-float(($line-height-h1--md*1.02), 2) !default;\n// ----------------------------------------------------\n$font-size-h2--sm: round-float($font-size-h1--sm*0.87, 1) !default;\n$line-height-h2--sm: round-float(($line-height-h1--sm*1.01), 2) !default;\n// ----------------------------------------------------\n@mixin font-h2() {\n  font-size: $font-size-h2;\n  line-height: $line-height-h2;\n\n  @include media('<tab-lg') {\n    font-size: $font-size-h2--md;\n    line-height: $line-height-h2--md; }\n\n  @include media('<mob-lg') {\n    font-size: $font-size-h2--sm;\n    line-height: $line-height-h2--sm; } }\n\n// Heading h3\n$font-size-h3: round-float($font-size-h1*2.4rem/4.8rem, 1) !default;\n$line-height-h3: round-float(3.6rem/2.4rem, 2) !default;\n// ----------------------------------------------------\n$font-size-h3--sm: round-float($font-size-h1--sm*0.73, 1) !default;\n$line-height-h3--sm: round-float(($line-height-h1--sm*1.05), 2) !default;\n// ----------------------------------------------------\n@mixin font-h3() {\n  font-size: $font-size-h3;\n  line-height: $line-height-h3;\n\n  @include media('<mob-lg') {\n    font-size: $font-size-h3--sm;\n    line-height: $line-height-h3--sm; } }\n\n// Heading h4\n$font-size-h4: round-float($font-size-h1*1.8rem/4.8rem, 1) !default;\n$line-height-h4: round-float(3.0rem/1.8rem, 2) !default;\n\n// Heading h5\n$font-size-h5: $font-size !default;\n$line-height-h5: $line-height !default;\n\n// Heading h6\n$font-size-h6: round-float($font-size*0.75, 1) !default;\n$line-height-h6: round-float($line-height*1.25, 2) !default;\n\n// Spaces\n$bottom-space: round-float($font-size*$line-height, 1) !default;\n$bottom-space--large: round-float($font-size*$line-height*3, 1) !default;\n$bottom-space--medium: round-float($font-size*$line-height*2.0, 1) !default;\n$bottom-space--middle: round-float($font-size*$line-height*1.5, 1) !default;\n$bottom-space--small: round-float($font-size*$line-height*0.75, 1) !default;\n\n\n// Colors\n// ==========================================================================\n\n// Color of brands\n$base-color: #ffa43f !default;\n$base-color-alt: lightskyblue !default;\n// ----------------------------------------------------\n$bg-color: #e5e5e5 !default;\n$bg-color-alt: #f3f3f3 !default;\n// ----------------------------------------------------\n$text-color: #262626 !default;\n$text-color-light: gray !default;\n$title-color: black !default;\n// ----------------------------------------------------\n$link-color: blue !default;\n// ----------------------------------------------------\n$border-color: lightgray !default;\n// ----------------------------------------------------\n$mark-color: tomato !default;\n\n\n// Class of typography styles\n// ==========================================================================\n// @example Sass - Использование\n// .#{$user-content}\n//\n// @example css - Вывод CSS\n// .user-content\n$user-content: user-content !default;\n\n\n// Layout\n// ==========================================================================\n\n// минимальная ширина сайта\n$page-layout-min: 320px !default;\n// отступы для всего сайта\n$page-layout-space: 18px 20px !default;\n// v h\n// максимальная ширина сайта\n$page-layout-width: 1920px !default;\n// минимальные отступы у текствого блока\n$text-layout-space: 50px 60px !default;\n// v h\n$text-layout-space--md: 25px 30px !default;\n// v h\n$text-layout-space--sm: 13px 15px !default;\n// v h\n$text-layout-space--mob: 8px 10px !default;\n// v h\n// максимальная ширина текстового блока\n$text-layout-width: 800px !default;\n// максимальная ширина текстового блока выходящего за пределы текста\n$flood-layout-width: 1000px !default;\n// отступы внутри блочных элементов\n$grid-space: 28px 30px !default;\n// v h\n$grid-space--lg: 18px 20px !default;\n// v h\n$grid-space--sm: 8px 10px !default;\n// v h\n// отступы в дефолтных списках\n$list-space: 30px;\n\n\n// Sidebar\n// ==========================================================================\n$sidebar-width: 260px !default;\n\n\n// Aside\n// ==========================================================================\n$aside-width: 160px !default;\n\n\n// Footer\n// ==========================================================================\n$footer-grid-space: 30px 0 !default;\n// v h\n\n\n// Buttons\n// ==========================================================================\n\n$btn-height: 50px !default;\n$btn-bg-color: $base-color !default;\n$btn-bg-hover-color: darken($btn-bg-color, 20%) !default;\n$btn-text-color: white !default;\n$btn-disabled-color: #ccc !default;\n\n\n// Forms\n// ==========================================================================\n\n// List of inputs\n$inputs-list: 'input[type=\"text\"]', 'input[type=\"password\"]', 'input[type=\"email\"]', 'input[type=\"search\"]', 'textarea';\n\n// Colors of forms\n$form-text-color: $text-color !default;\n$form-placeholder-color: lighten($form-text-color, 65%) !default;\n$form-bg-color: white !default;\n$form-border-color: lighten($form-text-color, 70%) !default;\n// validation\n$form-error-color: red !default;\n$form-success-color: lightseagreen !default;\n// disabled\n$form-text-color--disabled: rgb(190, 190, 190) !default;\n$form-bg-color--disabled: rgb(222, 222, 222) !default;\n$form-border-color--disabled: rgb(222, 222, 222) !default;\n// focus\n$form-border-color--focus: darken($form-border-color, 20%) !default;\n\n// Fonts of forms\n$form-font-size: 16px !default;\n$form-line-height: 24px !default;\n$form-input-height: 50px !default;\n$form-letter-spacing: null !default;\n\n// @example Sass - Использование\n// @example css - Вывод CSS\n@mixin inputs-font() {\n  //+font-alt\n  font-family: inherit;\n  font-size: $form-font-size;\n  line-height: $form-line-height;\n  @if $form-letter-spacing {\n    letter-spacing: $form-letter-spacing; }\n  color: $form-text-color; }\n\n@mixin selects-font() {\n  @include inputs-font; }\n\n//+media('<mob-lg')\n//ont-size: 10px\n\n// Layout of forms\n$form-border-width: 1px !default;\n$form-input-space-vt: floor(($form-input-height - $form-line-height - $form-border-width*2)/2) !default;\n// верхний паддинг округляем в нижнюю сторону\n$form-input-space-vb: ceil(($form-input-height - $form-line-height - $form-border-width*2)/2) !default;\n// нижний паддинг округляем в верхнюю сторону\n$form-input-space-h: 18px !default;\n$form-bottom-space: 3rem !default;\n$form-bottom-space--mob: 2rem !default;\n$form-gap: 40px !default;\n\n// Vertical spaces\n@mixin forms-space() {\n  margin: 0 0 $form-bottom-space;\n\n  @include media('<mob-lg') {\n    margin: 0 0 $form-bottom-space--mob; } }\n\n// Checkboxes\n// Radio Buttons\n$checkbox-color: #ff3aa3 !default;\n\n// Select\n$select-space-v: 12px !default;\n$select-arrow-width: 40px !default;\n$select-arrow-height: 100% !default;\n$multiple-item-space: 3px !default;\n\n// Style Selection\n@mixin selectSelection() {\n  height: $form-input-height;\n  width: 100%;\n  padding: $form-input-space-vt $select-arrow-width $form-input-space-vb $form-input-space-h;\n  background: $form-bg-color;\n  border: #{$form-border-width} solid #{$form-border-color};\n  border-radius: 0;\n  box-shadow: none;\n  text-indent: 0;\n  outline: none; }\n\n// States\n@mixin form-success() {\n  color: $form-success-color;\n  border-color: $form-success-color; }\n\n@mixin form-error() {\n  color: $form-error-color;\n  border-color: $form-error-color; }\n\n@mixin form-has-value() {\n  color: blueviolet;\n  border-color: blueviolet; }\n\n@mixin form-on-focus() {\n  //color: $form-border-focus-color\n  border-color: $form-border-color--focus; }\n\n\n// Animation\n// ==========================================================================\n$animation-speed: 0.2s !default;\n$animation-speed-mouseleave: 0.35s !default;\n\n// No custom list\n// ==========================================================================\n$no-custom-list-parent: null !default; // parent elements of a list\n$no-custom-list: ':not(.reset-list):not(.no-custom):not(.breadcrumbs__list):not(.slick-dots)';\n","// =============================================================================\n// pow\n// =============================================================================\n/// Возведение в степень\n///\n/// @param {Number, Length} $number - Число\n/// @param {Number, Length} $exponent - Степень\n/// @return {Number} - Значение `$number` возведенно в степень `$exponent`\n\n@function pow($number, $exponent) {\n  $value: 1;\n\n  @if $exponent > 0 {\n    @for $i from 1 through $exponent {\n      $value: $value * $number; } }\n\n  @return $value; }\n\n// =============================================================================\n// round-float\n// =============================================================================\n/// Округление до n знаков после запятой\n///\n/// @param {Number, Length} $number - Число\n/// @param {Number, Length} $n - Количество знаков после запяной\n/// @return {Number} - Значение округленное до `n` знаков после запятой\n\n@function round-float($number, $n) {\n  $float: pow(10, $n);\n\n  $value: round($number*$float)/$float;\n\n  @return $value; }\n"]}